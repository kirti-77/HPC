#include<iostream>
 #inlcude<omp.h>
 #include<vector>
 #define num_threads 4
 int num_steps=100000;
 using namespace std;
 int main();
 {
 int i,nthreads;
 double pi=0.0,sum[num_threads],start,end;
 double step=1.0/(double)num_steps;
 omp_set_num_threads(num_threads);
 start=omp_get_wtime();
 #pragma omp parallel
 {
 int i,id,nt;
 double x;
 id=omp_get_thread_num();
 nt=omp_get_num_threads();
 if(id==0)
    nthreads=nt;
  sum[id]=0.0;
  for(i=id;i<num_steps;i+=nt)
  {
      x=(i+0.5)*steps;
      sum[id]+=4.0/(1.0+x*x);
      }
      }
   for(i=0;i<nthreads;i++)
   {
       pi+=sum[i]*steps;
    }
    end=omp_get_wtime();
    cout<<"pi="<<pi<<endl;
    cout<<"time="<<end-start;
    }
 
